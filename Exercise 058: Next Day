def leap_year_checker():
    """
    Checks if the input year is a leap year
    """
    if year % 400 == 0:
        leap_year = 1
    else:
        if year % 100 == 0:
            leap_year = 0
        else:
            if year % 4 == 0:
                leap_year = 1
            else:
                leap_year = 0
    return leap_year


# Tuples that store which months have 31 days and which months have 30 days
days_31 = (1, 3, 5, 7, 8, 10, 12)
days_30 = (4, 6, 9, 11)

# Loop to check user input for year, month, and day
loop = 1
while loop == 1:
    # checker used to ensure both month and date inputs are valid
    checker = 0
    try:
        year = int(input('Please type the year:'))
        leap_year_checker()

        month = int(input('Please type the month:'))
        if month not in range(1, 13):
            print('Month must be within 1-12!')
        else:
            day = int(input('Please type the date:'))
            if month == 2 and leap_year_checker() == 0 and day not in range(1, 29):
                print('This is a not a leap year, so there are only 28 days in February!')
            elif month == 2 and leap_year_checker() == 1 and day not in range(1, 30):
                print('This is a leap year, but there are only 29 days in February!')
            elif month in days_30 and day not in range(1, 31):
                print('There are only 30 days in this month!')
            elif month in days_31 and day not in range(1, 32):
                print('There are only 31 days in this month!')
            else:
                loop = 0

    except ValueError:
        print('Please only type a number!')

# Prints out the user-selected date
print(f'Your input date is: {day}:{month}:{year}')

# Defining conditions for generation of next day:
if month == 12 and day == 31:
    year += 1
    day = 1
    month = 1
elif month == 2 and leap_year_checker() == 1 and day == 29:
    day = 1
    month += 1
elif month == 2 and leap_year_checker() == 0 and day == 28:
    day = 1
    month += 1
elif month in days_31 and day == 31:
    day = 1
    month += 1
elif month in days_30 and day == 30:
    day = 1
    month += 1
else:
    day += 1

# Prints out the next date
print(f'The next date is: {day}:{month}:{year}')
